<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Net Worth Tracker</title>
  <style>
    :root{
      --bg:#0f1221;
      --card:#161a2e;
      --ink:#e9ecf6;
      --muted:#a7b0c8;
      --accent:#6aa5ff;
      --accent2:#8ee1c0;
      --danger:#ff7676;
      --ok:#00c28a;
      --border:#232742;
    }
    *{box-sizing:border-box}
    html,body{margin:0;height:100%;background:var(--bg);color:var(--ink);font:16px/1.45 system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial}
    .wrap{max-width:950px;margin:32px auto;padding:0 16px}
    h1{font-size:28px;margin:0 0 18px;letter-spacing:.3px}
    .grid{display:grid;gap:16px}
    @media(min-width:820px){.grid{grid-template-columns:1.2fr .8fr}}
    .card{background:var(--card);border:1px solid var(--border);border-radius:14px;padding:18px}
    .label{font-size:13px;color:var(--muted);margin-bottom:6px}
    .row{display:grid;grid-template-columns:1fr 1fr;gap:12px}
    .row-3{display:grid;grid-template-columns:repeat(3,1fr);gap:12px}
    input[type="number"], input[type="date"], input[type="text"]{
      width:100%;background:#0b0e1d;border:1px solid var(--border);
      color:var(--ink);border-radius:10px;padding:12px 12px;font-size:16px;outline:none
    }
    input[type="number"]::-webkit-outer-spin-button,
    input[type="number"]::-webkit-inner-spin-button{ -webkit-appearance:none;margin:0 }
    button{
      appearance:none;border:0;background:linear-gradient(90deg,var(--accent),#7bc0ff);
      color:#041027;font-weight:700;padding:12px 14px;border-radius:10px;cursor:pointer
    }
    button.alt{background:#0b0e1d;border:1px solid var(--border);color:var(--ink);font-weight:600}
    button.warn{background:linear-gradient(90deg,var(--danger),#ff9ba1);color:#2a0d0d}
    .stack{display:flex;gap:10px;flex-wrap:wrap}
    .metrics{display:grid;grid-template-columns:repeat(3,1fr);gap:12px;margin-top:14px}
    .metric{background:#0b0e1d;border:1px solid var(--border);border-radius:12px;padding:12px}
    .metric h3{margin:0;font-size:13px;color:var(--muted);font-weight:600}
    .metric .val{font-size:20px;margin-top:6px}
    .bar-wrap{margin-top:14px;background:#0b0e1d;border:1px solid var(--border);border-radius:12px;padding:14px}
    .bar{height:24px;background:#0a1024;border-radius:999px;overflow:hidden;border:1px solid #1c2140}
    .fill{height:100%;width:0%;background:linear-gradient(90deg,var(--accent2),var(--ok));transition:width .35s ease}
    .pct{margin-top:8px;font-weight:700}
    .small{font-size:13px;color:var(--muted)}
    table{width:100%;border-collapse:collapse;margin-top:10px}
    th,td{padding:10px 8px;border-bottom:1px solid var(--border);text-align:right}
    th:first-child,td:first-child{text-align:left}
    .actions{display:flex;gap:6px;justify-content:flex-end}
    .tag{display:inline-block;padding:2px 8px;border:1px solid var(--border);border-radius:999px;font-size:12px;color:var(--muted)}
    .footer{margin-top:20px;color:var(--muted);font-size:12px;text-align:center}
    a.link{color:#a5c9ff;text-decoration:none}
  </style>
</head>
<body>
  <div class="wrap">
    <h1>Net Worth Tracker</h1>

    <div class="grid">
      <!-- LEFT: inputs & progress -->
      <section class="card">
        <div class="row">
          <div>
            <div class="label">Goal (top of the bar)</div>
            <input id="goal" type="number" inputmode="decimal" placeholder="e.g. 100000" />
          </div>
          <div>
            <div class="label">Week ending</div>
            <input id="date" type="date" />
          </div>
        </div>

        <div class="row-3" style="margin-top:12px">
          <div>
            <div class="label">Trading portfolio</div>
            <input id="portfolio" type="number" inputmode="decimal" placeholder="e.g. 32500" />
          </div>
          <div>
            <div class="label">Checking</div>
            <input id="checking" type="number" inputmode="decimal" placeholder="e.g. 1800" />
          </div>
          <div>
            <div class="label">Other permanent assets</div>
            <input id="other" type="number" inputmode="decimal" placeholder="e.g. 15000" />
          </div>
        </div>

        <div class="stack" style="margin-top:14px">
          <button id="addBtn">Add / Update Week</button>
          <button class="alt" id="resetInputs">Clear Inputs</button>
        </div>

        <div class="metrics">
          <div class="metric">
            <h3>Total This Week</h3>
            <div class="val" id="totalNow">$0</div>
          </div>
          <div class="metric">
            <h3>Goal</h3>
            <div class="val" id="goalNow">$0</div>
          </div>
          <div class="metric">
            <h3>Change vs Last Week</h3>
            <div class="val" id="wowChange">—</div>
          </div>
        </div>

        <div class="bar-wrap">
          <div class="bar" aria-label="Progress toward goal">
            <div class="fill" id="fill"></div>
          </div>
          <div class="pct" id="pctLabel">0%</div>
          <div class="small" id="progressNote">Enter a goal and your values to see progress.</div>
        </div>
      </section>

      <!-- RIGHT: history -->
      <section class="card">
        <div class="stack" style="justify-content:space-between;align-items:center;margin-bottom:6px">
          <div class="tag" id="summaryTag">0 entries</div>
          <div class="stack">
            <button class="alt" id="exportCsv">Export CSV</button>
            <button class="warn" id="wipeAll">Delete All</button>
          </div>
        </div>
        <table id="history">
          <thead>
            <tr>
              <th>Week ending</th>
              <th>Portfolio</th>
              <th>Checking</th>
              <th>Other</th>
              <th>Total</th>
              <th></th>
            </tr>
          </thead>
          <tbody id="rows">
            <!-- populated by JS -->
          </tbody>
        </table>
      </section>
    </div>

    <div class="footer">
      Data is saved locally in your browser. You can safely refresh—your history stays put.
    </div>
  </div>

  <script>
    // --- Utilities ---
    const $ = (id) => document.getElementById(id);
    const fmtMoney = (n) => new Intl.NumberFormat(undefined, {style:'currency', currency: guessCurrency(), maximumFractionDigits: 0}).format(n||0);
    const fmtMoney2 = (n) => new Intl.NumberFormat(undefined, {style:'currency', currency: guessCurrency(), minimumFractionDigits: 2, maximumFractionDigits: 2}).format(n||0);
    const fmtPct = (n) => (n ?? 0).toFixed(1) + '%';
    function guessCurrency(){
      try{
        const locale = navigator.language || 'en-US';
        // crude: US -> USD, else default to USD if Intl fails
        return locale.includes('US') ? 'USD' : 'USD';
      }catch{ return 'USD'; }
    }
    const toNumber = (v) => {
      const n = Number(v);
      return Number.isFinite(n) ? n : 0;
    }

    // --- Storage ---
    const KEY_ENTRIES = 'nwt_entries_v1';
    const KEY_GOAL    = 'nwt_goal_v1';

    function loadEntries(){
      try{
        return JSON.parse(localStorage.getItem(KEY_ENTRIES) || '[]');
      }catch{ return []; }
    }
    function saveEntries(arr){
      localStorage.setItem(KEY_ENTRIES, JSON.stringify(arr));
    }
    function loadGoal(){
      const g = Number(localStorage.getItem(KEY_GOAL));
      return Number.isFinite(g) ? g : 0;
    }
    function saveGoal(n){
      localStorage.setItem(KEY_GOAL, String(n||0));
    }

    // --- Date helpers ---
    function defaultWeekEnding(){
      // Set default to the most recent Sunday (or today if you prefer Friday; adjust as you like)
      const d = new Date();
      const day = d.getDay(); // 0=Sun..6=Sat
      const diff = (day === 0) ? 0 : day; // go back to Sunday
      d.setDate(d.getDate() - diff);
      return d.toISOString().slice(0,10);
    }

    // --- State ---
    let entries = loadEntries().map(e => ({...e, total: Number(e.total)})).sort((a,b)=>a.date.localeCompare(b.date));
    let goal = loadGoal();

    // --- DOM init ---
    $('goal').value = goal || '';
    $('date').value = defaultWeekEnding();

    // --- Render ---
    function render(){
      // Summary tag
      $('summaryTag').textContent = `${entries.length} entr${entries.length===1?'y':'ies'}`;

      // Table
      const tbody = $('rows');
      tbody.innerHTML = '';
      for(const e of entries){
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${e.date}</td>
          <td>${fmtMoney2(e.portfolio)}</td>
          <td>${fmtMoney2(e.checking)}</td>
          <td>${fmtMoney2(e.other)}</td>
          <td>${fmtMoney2(e.total)}</td>
          <td class="actions">
            <button class="alt" data-edit="${e.date}">Edit</button>
            <button class="warn" data-del="${e.date}">Delete</button>
          </td>
        `;
        tbody.appendChild(tr);
      }

      // Current totals (use latest entry if any, where date <= selected date)
      const selectedDate = $('date').value || '0000-00-00';
      const latest = [...entries].filter(e => e.date <= selectedDate).pop() || entries[entries.length-1];
      const prev   = (latest) ? entries[entries.indexOf(latest)-1] : undefined;

      const total = latest?.total || 0;
      $('totalNow').textContent = fmtMoney(total);
      $('goalNow').textContent  = fmtMoney(goal||0);

      // WoW change
      if(latest && prev){
        const delta = latest.total - prev.total;
        const sign = delta >= 0 ? '+' : '−';
        $('wowChange').textContent = `${sign}${fmtMoney(Math.abs(delta))}`;
      } else {
        $('wowChange').textContent = '—';
      }

      // Progress bar
      const fill = $('fill');
      let pct = 0;
      if(goal > 0){
        pct = Math.max(0, (total / goal) * 100);
      }
      const capped = Math.min(100, pct);
      fill.style.width = `${capped}%`;

      const pctLabel = $('pctLabel');
      pctLabel.textContent = (goal > 0) ? fmtPct(pct) : '0%';

      const note = $('progressNote');
      if(goal <= 0){
        note.textContent = 'Set a goal to enable progress tracking.';
      } else if(!latest){
        note.textContent = 'Add at least one weekly entry to see progress.';
      } else if(pct >= 100){
        note.textContent = 'Goal reached! 🎉';
      } else {
        const remaining = Math.max(0, goal - total);
        note.textContent = `${fmtMoney(remaining)} to go.`;
      }

      // Wire row buttons (edit/delete)
      tbody.querySelectorAll('button[data-edit]').forEach(btn=>{
        btn.addEventListener('click', ()=>{
          const d = btn.getAttribute('data-edit');
          const e = entries.find(x=>x.date===d);
          if(!e) return;
          $('date').value = e.date;
          $('portfolio').value = e.portfolio;
          $('checking').value = e.checking;
          $('other').value = e.other;
          // scroll up for convenience
          window.scrollTo({top:0, behavior:'smooth'});
        });
      });
      tbody.querySelectorAll('button[data-del]').forEach(btn=>{
        btn.addEventListener('click', ()=>{
          const d = btn.getAttribute('data-del');
          if(confirm(`Delete the entry for ${d}?`)){
            entries = entries.filter(x=>x.date!==d);
            saveEntries(entries);
            render();
          }
        });
      });
    }

    // --- Handlers ---
    $('addBtn').addEventListener('click', ()=>{
      const date = $('date').value || defaultWeekEnding();
      const portfolio = toNumber($('portfolio').value);
      const checking  = toNumber($('checking').value);
      const other     = toNumber($('other').value);
      const g         = toNumber($('goal').value);

      if(g>0){ goal = g; saveGoal(goal); }

      const total = portfolio + checking + other;

      // upsert by date
      const idx = entries.findIndex(e=>e.date===date);
      const rec = {date, portfolio, checking, other, total};
      if(idx>=0){ entries[idx] = rec; } else { entries.push(rec); }
      entries.sort((a,b)=>a.date.localeCompare(b.date));
      saveEntries(entries);

      // UI nits
      $('portfolio').value = portfolio ? String(portfolio) : '';
      $('checking').value  = checking ? String(checking) : '';
      $('other').value     = other ? String(other) : '';

      render();
    });

    $('resetInputs').addEventListener('click', ()=>{
      $('portfolio').value='';
      $('checking').value='';
      $('other').value='';
    });

    $('goal').addEventListener('change', ()=>{
      goal = toNumber($('goal').value);
      saveGoal(goal);
      render();
    });
    $('date').addEventListener('change', render);

    $('exportCsv').addEventListener('click', ()=>{
      if(entries.length===0){ alert('No entries to export yet.'); return; }
      const header = ['date','portfolio','checking','other','total'];
      const lines = [header.join(',')];
      for(const e of entries){
        lines.push([e.date,e.portfolio,e.checking,e.other,e.total].join(','));
      }
      const csv = lines.join('\n');
      const blob = new Blob([csv], {type:'text/csv'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url; a.download = 'net_worth_history.csv';
      document.body.appendChild(a); a.click(); a.remove();
      URL.revokeObjectURL(url);
    });

    $('wipeAll').addEventListener('click', ()=>{
      if(!confirm('This will delete ALL saved entries and your goal. Continue?')) return;
      entries = [];
      goal = 0;
      saveEntries(entries);
      saveGoal(goal);
      $('goal').value = '';
      render();
    });

    // Initial render
    render();
  </script>
</body>
</html>
